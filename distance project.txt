#Libraries
import RPi.GPIO as GPIO
import time
from rpi_lcd import LCD
import rpi_lcd

a = rpi_lcd
#GPIO Mode (BOARD / BCM)
GPIO.setmode(GPIO.BCM)
GPIO.setwarnings(False)

#set GPIO Pins
GPIO_TRIGGER = 18
GPIO_ECHO = 24

LED1 = 17  #green
LED2 = 27  #orange
LED3 = 22  #red

Buzzer = 23

lcd = LCD()
#set GPIO direction (IN / OUT)
GPIO.setup(LED1, GPIO.OUT)
GPIO.setup(LED2, GPIO.OUT)
GPIO.setup(LED3, GPIO.OUT)
GPIO.setup(Buzzer, GPIO.OUT)
GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
GPIO.setup(GPIO_ECHO, GPIO.IN)

def distance():
    # set Trigger to HIGH
    GPIO.output(GPIO_TRIGGER, True)

    # set Trigger after 0.01ms to LOW
    time.sleep(0.00001)
    GPIO.output(GPIO_TRIGGER, False)

    StartTime = time.time()
    StopTime = time.time()

    # save StartTime
    while GPIO.input(GPIO_ECHO) == 0:
        StartTime = time.time()

    # save time of arrival
    while GPIO.input(GPIO_ECHO) == 1:
        StopTime = time.time()

    # time difference between start and arrival
    TimeElapsed = StopTime - StartTime
    # multiply with the sonic speed (34300 cm/s)
    # and divide by 2, because there and back
    distance = (TimeElapsed * 34300) / 2

    return distance
GPIO.output(Buzzer, False)
GPIO.output(LED1, False)
GPIO.output(LED2, False)
GPIO.output(LED3, False)

if __name__ == '__main__':
    try:
        while True:
            dist = distance()
            print ("Measured Distance = %.1f cm" % dist)
            
            if dist < 5:
                lcd.text("Too Close Distance = %.1f cm" % dist, 1)
                GPIO.output(Buzzer, True)
                GPIO.output(LED3, False)
                GPIO.output(LED2, False)
                GPIO.output(LED1, False)
                
                
            elif dist > 5 and dist <= 10:
                lcd.text("Closer Distance = %.1f cm" % dist, 1)
                GPIO.output(LED3, True)
                GPIO.output(Buzzer, False)
                GPIO.output(LED2, False)
                GPIO.output(LED1, False)
                
            elif dist > 10 and dist <= 18:
                lcd.text("Moderate Distance = %.1f cm" % dist, 1)
                GPIO.output(LED2, True)
                GPIO.output(Buzzer, False)
                GPIO.output(LED3, False)
                GPIO.output(LED1, False)
                
            elif dist > 18:
                lcd.text("Safe Distanc= %.1f cm" % dist, 1)
                GPIO.output(LED1, True)
                GPIO.output(Buzzer, False)
                GPIO.output(LED3, False)
                GPIO.output(LED2, False)
                
            elif dist >  60:
                lcd.text("Clear way = %.1f cm" % dist, 1)
                GPIO.output(LED1, False)
                GPIO.output(Buzzer, False)
                GPIO.output(LED3, False)
                GPIO.output(LED2, False)
            time.sleep(1)
            

        # Reset by pressing CTRL + C
    except KeyboardInterrupt:
        print("Measurement stopped by User")
        lcd.text("Measurement stopped by User", 1)
        GPIO.cleanup()

